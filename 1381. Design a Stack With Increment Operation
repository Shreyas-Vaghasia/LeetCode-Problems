Design a stack which supports the following operations.

Implement the CustomStack class:

CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize.
void push(int x) Adds x to the top of the stack if the stack hasn't reached the maxSize.
int pop() Pops and returns the top of stack or -1 if the stack is empty.
void inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, just increment all the elements in the stack.
class CustomStack:

    def __init__(self, maxSize: int):
        self.s=[]
        self.maxSize=maxSize
        

    def push(self, x: int) -> None:
        if len(self.s)<self.maxSize:
            self.s.append(x)
               
        

    def pop(self) -> int:
        if len(self.s)==0:
            return -1
        else:
            return self.s.pop()
        

    def increment(self, k: int, val: int) -> None:
        if k>len(self.s):
            
            for i in range(len(self.s)):
                self.s[i]=self.s[i]+val
        else:
            for i in range(k):
                self.s[i]=self.s[i]+val


# Your CustomStack object will be instantiated and called as such:
# obj = CustomStack(maxSize)
# obj.push(x)
# param_2 = obj.pop()
# obj.increment(k,val)
